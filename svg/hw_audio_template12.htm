 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns = "http://www.w3.org/1999/xhtml">
	 <head>
	 <meta http - equiv = "Content-Type" content = "text/html; charset=iso-8859-1" / >
	 <style>
	 </style>
	 <script src = "plugins/TweenLite.min.js">  </script>
	 <script src = "plugins/TweenMax.min.js">  </script>
	 <script src = "plugins/CSSPlugin.min.js">  </script>
	 <script src = "plugins/TimelineMax.min.js">  </script>
	 <script src = "plugins/TweenMax.min.js">  </script>
	 <script src = "plugins/CustomEase.min.js">  </script>
	 <script src = "plugins/DrawSVGPlugin.min.js">  </script>
	 <script src = "plugins/GSDevTools.min.js">  </script>
	 <script src = "plugins/CSSPlugin.min.js">  </script>
	 <script src = "plugins/Draggable.min.js">  </script>
	 <script src = "plugins/MorphSVGPlugin.min.js">  </script>
	 <script
	src = "https://code.jquery.com/jquery-3.3.1.min.js"
	integrity = "sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
	crossorigin = "anonymous">  </script>
	 <script src = "plugins/jquery.csv.min.js">  </script>

	 <title> Hello World template(or sample ? ) </title>
	 </head>
	 <body text = "#333333" link = "#71b200" leftmargin = "20" topmargin = "20" marginwidth = "20" marginheight = "20" bgcolor = "#eeeeee">
	 <div id = "clap" style = "position:absolute; width:200px; height:200px;">  <h1 id = "countdown">  </h1>  </div>

	 <div style = "text-align:center; width:100%">
	 <h1>  </h1>

	 <div id = "container" style = "width:100%; height:100%">  </div>
	 <!--TODO search for "first", "second" "third" and replace by real values-->
 <audio id = "first" src = "audio/test_first.mp3">  </audio>
	 <audio id = "second" src = "audio/test_second.mp3">  </audio>
	 <audio id = "third" src = "audio/test_third.mp3">  </audio>

	 <script>
	$(function () {

		// load svg with ajax

		var colors = ["#FF0000", "#FFFF00", "#00FF00", "#00FFFF", "#0000FF", "#FF00FF", "#ED1C24", "#FFF200", "#00A651", "#00AEEF", "#2E3192", "#EC008C", "#FF0000"];

		var container = $("#container");
		// const svgUrl   ="https://upload.wikimedia.org/wikipedia/commons/0/02/SVG_logo.svg";

		// TODO: adjust file URLs
		const svgFile = "https://upload.wikimedia.org/wikipedia/commons/0/02/SVG_logo.svg";
		const markers = "audio/Markers.csv"

			// load SVG file (exported from Illustrator) and audio markers CSV file (exported from Audiotion)
			var fileSVG = $.get(svgFile),
		fileAudioMarkers = $.get(markers),
		all = $.when(fileSVG, fileAudioMarkers)
			.then(injectSvg)
			.always(doAnimation)
			.fail(handleFail);

		function handleFail(message) {
			console.log("LOAD FAILED!!!!! ");
			console.log(message);
		}

		// inject SVG file into <div id="#container"
		function injectSvg(xmlDoc) {
			var svg = $(xmlDoc).find("svg");
			container.append(svg);
			svg.attr("id", "svg");
			svg.attr("width", "300");
		}

		// create CSS classes for easy manipulation of complex graphics that can't be grouped graphically
		function initClasses() {
			// TODO add css classes to make animation targets a) for multiple items in svg b) for items where the id doesn't make it to the SVG output
			$("* ").addClass("background");
			$("#a").addClass("background");
			$("#svg-text *").addClass("svg");
			$("#svg-text").addClass("svg");
		}

		function retrieveCSVfromAudition(csvText) {
			console.log(csvText.indexOf("\t"));
			csvText2 = csvText.replace(/\t/gi, ",");
			console.log(csvText2);
			var arr = $.csv.toArrays(csvText2);
			return arr;
		}

		//converts 0:02.670 to 2.270
		// will not work if over 1 hour long
		function convertDuration(str) {
			var arr = str.split(":");
			console.log
			if (arr.length == 2) {
				val = Number((Number(arr[0]) * 60) + Number(arr[1]));
				console.log("converted=" + val);
				return val;
			} else
				return 3.333;
		}

		function playAudio(id) {
			document.getElementById(id).play();
		}

		function getFirst() {
			var tl = new TimelineLite({
					id: arAudioMarkers[1][0]
				});
			tl.call(playAudio, ["first"]);
			// TODO: add console.log statements with output like toto = toto (easy to check)
			//  console.log('$(".background")=' );
			//  console.log($(".background"));
			//console.log('$(".svg")='+$(".svg") );
			// output should be in the form:
			// hw_background1 = hw_background1

			// TODO: add blink + text to test different areas behave as expected
			// tl.to(".background", 2, { fill:"#000000", stroke:"#000000"});
			// tl.to(".svg", 2, {opacity:1, fill:"#ffffff", stroke:"#ff0000"});
			// tl.to(".background", 2, { clearProps:"all"}, "+=2");
			tl.to(".svg", 2, {
				opacity: 0.8
			});
			tl.to("#svg-text", 5, {
				x: "-100"
			});
			tl.to(".svg", 1, {
				clearProps: "all"
			}, "+=2");
			return tl;
		}

		function getSecond() {
			var tl = new TimelineLite({
					id: arAudioMarkers[2][0]
				});
			tl.call(playAudio, ["second"]);
			tl.to("#svg-text", 2, {
				scale: 2,
				x: "50"
			});
			return tl;
		}

		function getThird() {
			var tl = new TimelineLite({
					id: arAudioMarkers[3][0]
				});
			tl.call(playAudio, ["third"]);
			tl.to("#svg-text", 2, {
				rotation: 90
			});
			return tl;
		}

		function clap() {
			var tl = new TimelineLite({
					id: "clap"
				});
			tl.to("#clap", 2, {
				backgroundColor: "red"
			});
			tl.set("#countdown", {
				text: "1"
			});
			tl.to("#clap", 2, {
				backgroundColor: "green"
			});
			tl.to("#clap", 2, {
				backgroundColor: "blue"
			});
			tl.to("#clap", 2, {
				backgroundColor: "blue"
			});
			tl.to("#clap", 2, {
				backgroundColor: "transparent"
			});
			tl.duration(1);
			return tl;
		}

		function doAnimation() {
			initClasses();
			allText = fileAudioMarkers.responseText;
			arAudioMarkers = retrieveCSVfromAudition(allText);
			console.log(arAudioMarkers);

			var arTimeLines = [];
			var first = getFirst();
			var second = getSecond();
			var third = getThird();

			arTimeLines.push({
				name: arAudioMarkers[1][0],
				timeLine: first,
				duration: convertDuration(arAudioMarkers[1][2])
			});
			arTimeLines.push({
				name: arAudioMarkers[2][0],
				timeLine: second,
				duration: convertDuration(arAudioMarkers[2][2])
			});
			arTimeLines.push({
				name: arAudioMarkers[3][0],
				timeLine: third,
				duration: convertDuration(arAudioMarkers[3][2])
			});

			console.log(arTimeLines[1].duration);
			first.duration(arTimeLines[0].duration);
			second.duration(arTimeLines[1].duration);
			third.duration(arTimeLines[2].duration);

			var master = new TimelineLite();
			master.add(clap());
			master.add(first);
			master.add(second);
			master.add(third);
			master.add(clap());

		} // end doanimation

		GSDevTools.create();

	}); // end jQuery
 </script>

 </body>
</html>
